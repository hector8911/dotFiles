set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10

set icons
set ratios 1:2:3
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview

# Functions

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd delete ${{
     set -f
     printf "Delete? [y/n] "
     read ans
     [ $ans = "y" ] && rm -rf $fx
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2) tar xjvf $f;;
        *.tar.gz) tar xzvf $f;;
        *.tar) tar xvf $f ;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
    esac
}}

cmd zip %zip -r "$f" "$f"

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
}}

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"

    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

#Mappings

map tr restore_trash
map <delete> %trash-empty
map d trash
map D delete

map <enter> open
map . set hidden!
map c copy
map x cut
map a mkfile
map A mkdir
map R reload
map r push :rename<space>

# execute current file (must be executable)
map o $$f
map O !$f

map z zip
map / extract

